#! -*- coding:utf-8 -*-

'''
input annotations file path that generated by caltech/convert_annotations.py.

return train and test images annotations sorted list.
'''

import json


def parse(json_file_path, train_set, test_set):

    output = open('output', 'w')
    train_annos = []
    test_annos = []

    with open(json_file_path, 'r') as json_file:

        data = json.load(json_file)

        # into a video set
        for s in data.keys():
            print "set for: {}".format(s)
            # into a video
            for v in data[s].keys():
                print "seq video {} in {}".format(v, s)
                frame_num = data[s][v]["nFrame"]
                print("frame numbers: {}".format(frame_num))

                all_frames = data[s][v]["frames"]
                # into a frame(also a image)
                for idx in all_frames.keys():
                    img_name = "{}_{}_{}.png".format(s, v, idx)
                    # print("process image: {}".format(img_name))

                    # into a pedestrian object in the image
                    for obj in all_frames[idx]:

                        # label must be person
                        if obj["lbl"] != "person":
                            continue

                        pos = obj["pos"]
                        pos[2] = pos[2] + pos[0]
                        pos[3] = pos[3] + pos[1]
                        pos = [str(i) for i in pos]
                        # print ' '.join(pos)

                        obj_anno = img_name + ' ' + ' '.join(pos)
                        # output.write(obj_anno + '\n')

                        if s in train_set:
                            train_annos.append(obj_anno)
                        elif s in test_set:
                            test_annos.append(obj_anno)
                        else:
                            print("unknown set error.")
                            exit(-1)

                    obj_num = len(all_frames[idx])
                    print("process {} {} object.".format(img_name, obj_num))

    output.close()
    train_annos = sort_by_name(train_annos)
    test_annos = sort_by_name(test_annos)
    return (train_annos, test_annos)


# define annotations list compare function
def name_cmp(x, y):

    def get_id(name):
        return name.split(' ')[0].split('.')[0].split('_')[-1]

    x_id = get_id(x)
    y_id = get_id(y)
    if int(x_id) > int(y_id):
        return 1
    if int(x_id) < int(y_id):
        return -1
    return 0


def sort_by_name(annos):

    return sorted(annos, name_cmp)


if __name__ == "__main__":

    # set train and test set
    train_set = ("set00")
    test_set = ("set01")

    train_annos, test_annos = parse("./annotations.json", train_set, test_set)

    print(train_annos)
    print(test_annos)
